Notes for graph.c

1. When a program finishes, and is in autohold, it cannot be cancelled with
ctl-c. I studied the issue, and apparently by the time it function pa_deinit_graph
function is executed, something has occurred to damage the input queue such that
characters typed to the input queue are not serviced, and thus the window locks
as unresponsive. This was proved by moving the hold code into a function "softshutdown()"
then call that from main program, and it works fine.

2. When error send to dialog is enabled, I have seen double faults where the dialog
is closed, then an error is sent to main window.

3. In buffered mode, there should be arrangements to insert scroll bars if the window
is clipping the buffer (window size smaller than buffer). This matches the behavior of
(say) the windows console subsystem.

4. xltwin and filwin are initialized to 0, and should be -1 (since fids are >= 0).

5. Windows appears to pick a different dpm depending on which font is selected
for the system font.

************************************************************************************
TEST RESULTS
************************************************************************************

Terminal_test

Management test

1. According to the documentation for AdjustWindowRectEx(), double row menus are
not correctly calculated. We need a test for this as well as a fix.

2. Hitting a button gives it the keyboard focus. You then have to hit the client
area of the main window to get keyboard focus again.

3, Dropeditbox does not take a return while editting as an event. It does set the
contents of the box, but that is not the behavior specified.

4. querycolor(), querysave(), queryfind(), and queryfindrep() need their 
descriptions updated.

5. tabbar() and tabbarclient() need their descriptions updated. 

*************************************************************************************

The following are notes from the old (untranslated) version of graph.

*************************************************************************************

1. Inserting a readln after child windows create in ipide, then canceling
that, causes a "windows no error" to occur. Also happens in other circumstances.

2. Line endings on non-orthogonal lines are a first attempt approximation,
and could use improvement.

3. Cannot do text foreground/background text xor. One method to do this would
be to copy the text to a buffer, then perform the xor as a bitblt back to the
main buffer and screen.

4. Implement charspace and linespace (blank space) functions.

5. As part of the viewoff/viewscale enhancement, when painting text in
non-orthogonal scaling, the text as drawn does not follow the asymetrical
scaling (although the point size does), but it is correct in the buffer. The
answer is to paint text into the buffer, then paint back from the buffer for
these modes.

6. When closing the main window with the find dialog in progress, the query
find routine returns with a termination event signaled, then can error when
the program again tries to use the (now closed) window. The problem is that
the wm_quit message happens AFTER the window is already closed so any writes
to it will cause a fault. Its impossible to know that a termination occurred
during the dialog, and even putting back the event won't accomplish anything,
since the app cannot poll that.
This could be related to (8).

7. On queryfind, when the dialog appears, hitting the main window does not
make the cursor appear, but hitting the dialog, then hitting the main window
does.

8, Have to make sure a find dialog is canceled for any of the abnormal
conditions, like main window cancelled, or whole program aborted.

9. In gratst, during the benchmark sections, covering and uncovering the
window when paused between benchmarks, the screen as redrawn becomes
"noise" except for the text, very odd.

10. Arcs that end on 90 degree quads have rounded ends on only ONE side
(which should be impossible). See gratst for a demonstration of this. This
is a Windows bug that needs to be papered over. The most likely solution is
to draw an ellipse and use a clipping region to force it to be an arc.
[is this an artifact of Windows or the graphics card driver? Check other
Windows machines.]

11. Turning on a menu with a buffered surface should change the size of the
window to keep the client area over the full buffer. Note that this is not
trivial, since the amount of y area covered by the window can vary when the
window is small in x and the menu wraps.

12. In clockg, the date string disappears if the clock loses focus.

13. In querycolor, I can't get the dialog to accept the input as the default
selection.

14. In queryfind and queryfindrep, the proper behavior is to return an empty
string if cancel is pressed. This is necessary since find and/or replace is
an action, and the caller needs to know if it has been canceled. The problem
is that windows provides no indication cancel was hit, other than the fact
that the dialog quits, because we normally terminate it when it gives a
message. Hooking it works, but it's just a button press difference between
find and cancel. One way to do this might be to retrive the text for the
button to identify it, but this could be broken as well if the dialog
changes extensively.

15. Should not be able to maximize a window that has sizing turned off, that
defeats the purpose.

16. In the "delayed presentation" system for windows, we don't check for
visible in event(), because the input file could be matched to a number of
output files. Logically, inputs on a window should display them, since
the program could be waiting on a user with the window invisible. However,
in order for that to happen, the window would have to be left entirely
blank, then wait for input, which is unlikely and not useful. The problem
is that we don't want to search the entire open file table on each event()
call. Perhaps a more efficent system of indicating lists of attached input
to output files ?

17. Applying frame() to a child window after it has been sized, undoes the
sizing operation.

18. Tick mark placement on sliders is completely messed up. We need either
a model were the pixel spacing between ticks is specified, or the total
number of marks across the slider is specified. The current mode does neither.

19. In wigtst, the "terminal overlaid tab bar test", the fact that the label
area is not whole characters causes problems with the tab sides overlaying
each others label area.

20. We don't seem to be getting last on/on top behavior for widgets, see the
"overlaid tab bar" in wigtst. We might need to force new widgets to the
front. Also, we need some stacked widget tests.

21. Should we move to a policy of "rightsizing" for buttons and other widgets?
The idea here would be that the users consult sizing to find the correct look
and feel of the interface, and aren't going to use the "minimum" sizing
provided by buttonsiz and similar sizing routines. As it is, the interface
encourages the user to modify the sizing results for actual use, which might
be a problem later.

22. Drop edit box should be subclassed to give an event when the user hits
return.

23. The new "autohold" routine gives a solution to exiting without tripping
the autohold (the installer gives a good example of this need). However,
any program that uses event calls should be given this privledge. Perhaps
event() should also set it off.

24. Placing a scrollbar ontop of a tabbar causes the scrollbar to not get
redrawn properly on hides/reveals. Probally related to the various tabbar
redraw issues discovered.

25. When using tabbars, the square generated by "uselesswidget" is showing
up onscreen, and not getting killed.

26. When compiling a program that had a "error" file use, but was a detached
windows graphical, I get a "file not open" type error in a dialog. Then,
there is a zombie process in the log.

27. Scroll() in long windows on unbuffered mode does not work correctly, see
ipide.exe.

28. I see a "memory overflow" error in mantst, "child windows torture test
pixel". Research expanding memory allocation to determine if it is a memory
leak.

29. In mantst, after "child windws stacking...", when the buffer is reenabled,
hide and cover reveals that the surface outside of the newly enabled buffer is
no longer being drawn.

30. Repeatedly setting a single shot timer causes a windows timer overflow
error after 16 such sets. See L. Tunnicliffe's program.

********************* Enhancement/Feature proposals ****************************

1. It makes sense to have scrollbars be an attribute of a window, as well as
a standalone widget. This is because where the scrollbars meet, there is a
special size tab.

2. Implement command file options, ie., gralib allows "program.gra" to
contain graphics configuration commands, taken from the program file
directory.

3. Finish viewoff and viewscale procedures.

4. Does it make sense to have a resize command for widgets? The current method
is to delete a widget and recreate at the new size.

5. Implement command line options.

6. Implement accelerators for menus, using createacceleratortable.

7. Add the ability to generate a menu at any given position in a window. This is
how you form dropdown menus on right button mouse clicks.

8. Right now, etresize, etmax and etmin events are suppressed for buffered
windows. However, they could be let through. The instruction to the user would
be to ignore these events if in buffered mode. This allows unusual things
like resizing a buffer to follow the window. The bad side is that these events
would occur even for low level programs, such as terminal. There is precident
for this, etmoumovg events occur even in terminal programs.

9. Can we add optional labels for the top and bottom of a slider?

10. When buffering is on, and the window is smaller than the buffer, should
enable scroll bars and enable scrolling around the buffer space.

11. Ideally, winclient should return the minimum window size if the requested
client size is too small. The underlying call, adjustwindowrect, does not do
this, so we would have to determine what the minimum size is ourselves.
That is not simple, and getsystemmetrics does not cover all modes.

12. Add repetitive widget create then kill, for all widgets, to wigtst.

13. When openwin specifies an input side window that is not open in any mode,
can we automatically open it as a window input file? This would be the action
performed if the user wanted to open an anonymous input side queue.

14. A great improvement to "auto" mode is to only wrap when the lower right
hand corner of the drawn character box is past the right edge of the screen,
and only scroll when the lower right hand corner of the drawn character is
past the end of the screen. This prevents the need to disallow off grid
positioning, font changing, etc., with auto mode on.
