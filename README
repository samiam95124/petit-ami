********************************* PETIT AMI PROJECT ****************************

WHAT IT IS

Petit Ami is a general purpose tool kit based on the libraries used in the
language Pascaline. The toolkit is written in the C language, but is written in
such a way as it does not have dependencies on the C language. Thus, it can be
used by several languages by the process of "binding" or using a cross language
API to interface to it.

Petit AMI addresses:

System services, such as directory listings, file name handling, paths,
    environment, other program execution, date and time, and
    internationalization.

Display drawing, windowing and graphics.

Sound processing.

Networking

Petit Ami is designed to supply a basic set of functionality commonly needed
by programs across multiple platforms.

The design basics of Petit Ami, and what makes it different from other,
similar toolkits is that Petit Ami is:

- The simplest possible set of functions needed to perform the covered functions.
  PA does not try to provide lots of ways to do things or give advanced features.
  It provides only the minimum necessary features, and leaves the makings of
  advanced libraries to other packages.

- PA uses the most simple I/O models possible. There are no callbacks, and there
  is a single event loop. If all the program needs is keyboard input, even the
  event loop can be bypassed.

- PA is upward compatible with the original text based models of programming
  languages. It uses standard C I/O like printf, scanf, putc, getc and other
  standard library functions, and builds on them in a compatable way. Thus any
  standard ANSI C program is automatically a Petit Ami compatible program. This
  is very different than virtually all existing TKs that force you to discard
  standard I/O models to use the GTK elements of their TK.
  
- It allows use of standard ANSI C and is language agnostic. PA came from
  another language, and is far less language dependent than supposedly "language
  independent" TKs. It does not depend on callbacks, void pointers, zero 
  terminated strings, classes/objects, and other language specific features. As
  with with a few other TKs, such language specific features are left to the
  individual language bindings.

WHAT IS PROVIDED

Petit Ami is a series of C files that address the various API sections that
make up the PA standard. The ability run standard ANSI library functions atop
a GUI is done by using replacing stdio and interdicting the basic file I/O calls,
including to the console.

PA can be run either native or stacked atop another TK. The first PA/TK
available is a layer of adaption code for GTK+, which allows PA/TK to run on
any system GTK+ can, including Windows, Linux an the MAC.

When another language besides C is used, an LTL or Language Translation layer
is included. Current LTLs are:

C++
Pascaline

HOW IT WORKS

Besides providing a set of support libraries, Petit-AMI uses a trick of the 
standard C libraries (LIBC). Each of the modules that make up the standard C
library collection can be replaced with another. We use this principle to
replace the stdio library with our own. The PA stdio module implements all of
the file I/O calls, such as getchar(), putchar(), printf(), scanf(), etc.
These are all written to standard LIBC specifications, and all of them distill
the basic I/O operations down to calls to the fundamental operating system
I/O calls, such as read(), write(), open(), etc.

The trick is that our stdio implements an override function in standard C.
Each of the read(), write(), open(), close(), unlink() and lseek() basic OS
call entries has an override routine which saves the original function being
called and replaces it with what the overrider wants.

What this does is allow PA modules to "hook" the fundamental OS calls and
redirect them, process the calls themselves, and even call the orignal overriden
functions if needed. So lets say a graphical terminal module is loaded from the
PA module set. It overrides the I/O functions, and translates the read() and
write() calls to (say) GTK graphics calls. Thus, even though the original
program contains say:

int main(void)

{

    printf("Hello, world\n");
    
}

Using the standard I/O from LIBC, it ends up on a graphical window set up to
output to the GTK graphics and windowing package.

PA is designed to present its I/O abstractions as a series of paradigms starting
with standard terminal output, lines of text with line terminator characters 
(CR/LF or just LF). It them adds a terminal model, or lines of text on a fixed
screen, then mixed graphics and text on a screen, then windows containing
graphics and text, then widgets, etc.

The idea is that every paradigm is built to be compatible ith the one before, 
and thus each program using one of the lower paradigm can be ported without 
change to a more complex model. Line oriented model programs can be ported to
terminal model, terminal to graphical, graphical to windowing, etc.

DIRECTORY STRUCTURE

Some of the directories, like bin, don't exist until a make is run to create 
them.

bin			Contains executable binaries built for the current system, libraries
            in .dll, .so or .a forms, again built for current system.
doc			Documentation for the project.
glibc		Contains, or may contain, glibc and patch files. The patch files are
            part of the archive. The glibc sources are obtained off the net,
            patches can be applied to result in a custom glibc binary for the
            project.
include		Header files general to the project.
libc		A custom stdio implementation for Petit-ami, see the docs.
linux		Linux specific sources.
macosx		Mac OS X specific sources.
sound_prog	Programs for sound written for Petit-ami.
term_game	Terminal mode game programs written for Petit-ami.
term_prog	Programs for terminal mode written for Petit-ami.
windows		Windows specific sources.

FILES IN THE ROOT DIRECTORY

Makefile	The make file for all parts of the project.
README		This file.
TODO		The to do list for the project.
